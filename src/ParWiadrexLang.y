-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParWiadrexLang
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsWiadrexLang
import LexWiadrexLang

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '->' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ':' { PT _ (TS _ 15) }
  ';' { PT _ (TS _ 16) }
  '<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '=>' { PT _ (TS _ 21) }
  '>' { PT _ (TS _ 22) }
  '>=' { PT _ (TS _ 23) }
  'Bool' { PT _ (TS _ 24) }
  'False' { PT _ (TS _ 25) }
  'Int' { PT _ (TS _ 26) }
  'String' { PT _ (TS _ 27) }
  'True' { PT _ (TS _ 28) }
  'Void' { PT _ (TS _ 29) }
  'else' { PT _ (TS _ 30) }
  'fun' { PT _ (TS _ 31) }
  'if' { PT _ (TS _ 32) }
  'lambda' { PT _ (TS _ 33) }
  'new' { PT _ (TS _ 34) }
  'return' { PT _ (TS _ 35) }
  'var' { PT _ (TS _ 36) }
  'while' { PT _ (TS _ 37) }
  '{' { PT _ (TS _ 38) }
  '||' { PT _ (TS _ 39) }
  '}' { PT _ (TS _ 40) }
  L_Ident  { PT _ (TV _) }
  L_integ  { PT _ (TI _) }
  L_quoted { PT _ (TL _) }

%%

Ident :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Ident) }
Ident  : L_Ident { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.Ident (tokenText $1)) }

Integer :: { (AbsWiadrexLang.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsWiadrexLang.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Program) }
Program : ListInit { (fst $1, AbsWiadrexLang.PProgram (fst $1) (snd $1)) }

ListInit :: { (AbsWiadrexLang.BNFC'Position, [AbsWiadrexLang.Init]) }
ListInit : Init { (fst $1, (:[]) (snd $1)) }
         | Init ListInit { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Arg) }
Arg : Ident ':' Type { (fst $1, AbsWiadrexLang.PArg (fst $1) (snd $1) (snd $3)) }
    | 'var' Ident ':' Type { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.PArgVar (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

ListArg :: { (AbsWiadrexLang.BNFC'Position, [AbsWiadrexLang.Arg]) }
ListArg : {- empty -} { (AbsWiadrexLang.BNFC'NoPosition, []) }
        | Arg { (fst $1, (:[]) (snd $1)) }
        | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Init :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Init) }
Init : 'fun' Ident '(' ListArg ')' ':' Type Block { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.IFnDef (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $7) (snd $8)) }
     | 'var' Ident ':' Type '=' Expr ';' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.IInit (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }

Block :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Block) }
Block : '{' ListStmt '}' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SBlock (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2)) }

Stmt :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Stmt) }
Stmt : ';' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SEmpty (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | Block { (fst $1, AbsWiadrexLang.SBStmt (fst $1) (snd $1)) }
     | Init { (fst $1, AbsWiadrexLang.SInit (fst $1) (snd $1)) }
     | Ident '=' Expr ';' { (fst $1, AbsWiadrexLang.SAss (fst $1) (snd $1) (snd $3)) }
     | Ident '++' ';' { (fst $1, AbsWiadrexLang.SIncr (fst $1) (snd $1)) }
     | Ident '--' ';' { (fst $1, AbsWiadrexLang.SDecr (fst $1) (snd $1)) }
     | 'return' Expr ';' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SRet (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
     | 'return' ';' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SRetVoid (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | 'if' '(' Expr ')' Block { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SCond (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
     | 'if' '(' Expr ')' Block 'else' Block { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SCondElse (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
     | 'while' '(' Expr ')' Block { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.SWhile (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
     | Expr ';' { (fst $1, AbsWiadrexLang.SExp (fst $1) (snd $1)) }

ListStmt :: { (AbsWiadrexLang.BNFC'Position, [AbsWiadrexLang.Stmt]) }
ListStmt : {- empty -} { (AbsWiadrexLang.BNFC'NoPosition, []) }
         | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Type :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Type) }
Type : 'Int' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.TInt (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | 'String' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.TString (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | 'Bool' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.TBool (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | 'Void' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.TVoid (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
     | Ident { (fst $1, AbsWiadrexLang.TRec (fst $1) (snd $1)) }
     | '(' ListType ')' '->' Type { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.TFun (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }

ListType :: { (AbsWiadrexLang.BNFC'Position, [AbsWiadrexLang.Type]) }
ListType : {- empty -} { (AbsWiadrexLang.BNFC'NoPosition, []) }
         | Type { (fst $1, (:[]) (snd $1)) }
         | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr6 : Ident { (fst $1, AbsWiadrexLang.EVar (fst $1) (snd $1)) }
      | Integer { (fst $1, AbsWiadrexLang.ELitInt (fst $1) (snd $1)) }
      | 'True' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ELitTrue (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | 'False' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ELitFalse (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | Ident '(' ListExpr ')' { (fst $1, AbsWiadrexLang.EApp (fst $1) (snd $1) (snd $3)) }
      | String { (fst $1, AbsWiadrexLang.EString (fst $1) (snd $1)) }
      | '(' Expr ')' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr5 : '-' Expr6 { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ENeg (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | '!' Expr6 { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ENot (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
      | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr4 : Expr4 MulOp Expr5 { (fst $1, AbsWiadrexLang.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr3 : Expr3 AddOp Expr4 { (fst $1, AbsWiadrexLang.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr2 : Expr2 RelOp Expr3 { (fst $1, AbsWiadrexLang.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
      | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr1 : Expr2 '&&' Expr1 { (fst $1, AbsWiadrexLang.EAnd (fst $1) (snd $1) (snd $3)) }
      | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.Expr) }
Expr : Expr1 '||' Expr { (fst $1, AbsWiadrexLang.EOr (fst $1) (snd $1) (snd $3)) }
     | 'new' Ident '(' ListExpr ')' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ENew (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
     | 'lambda' '(' ListArg ')' '=>' Block { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ELambda (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $6)) }
     | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsWiadrexLang.BNFC'Position, [AbsWiadrexLang.Expr]) }
ListExpr : {- empty -} { (AbsWiadrexLang.BNFC'NoPosition, []) }
         | Expr { (fst $1, (:[]) (snd $1)) }
         | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.AddOp) }
AddOp : '+' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OPlus (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '-' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OMinus (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.MulOp) }
MulOp : '*' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OTimes (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '/' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ODiv (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '%' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OMod (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsWiadrexLang.BNFC'Position, AbsWiadrexLang.RelOp) }
RelOp : '<' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OLth (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '<=' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OLE (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '>' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OGth (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '>=' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OGE (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '==' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.OEq (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
      | '!=' { (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1), AbsWiadrexLang.ONe (uncurry AbsWiadrexLang.BNFC'Position (tokenLineCol $1))) }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsWiadrexLang.Program
pProgram = fmap snd . pProgram_internal
}

